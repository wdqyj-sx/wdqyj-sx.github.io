<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>高阶函数、函数柯里化、发布订阅模式和观察者模式的实现</title>
    <link href="/2021/10/10/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E3%80%81%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/10/10/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E3%80%81%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 要想实现Promise A+规范，必须要扫清一下知识上的盲点，在这里梳理一下高阶函数、函数柯里化、发布订阅模式和观察者模式。</p></blockquote><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>一个函数返回另一个函数</li><li>一个函数的参数可以接受一个函数<blockquote><p>高阶函数可以给函数进行功能扩展</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">core</span> (<span class="hljs-params">...arg</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;core&#x27;</span>, arg)<br>&#125;<br><br><span class="hljs-built_in">Function</span>.prototype.before = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-comment">//剩余运算符，接受不定参数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>        fn();<br>        <span class="hljs-comment">//扩展运算发,将数组分为参数</span><br>        <span class="hljs-built_in">this</span>(...args)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cb</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;附加的处理逻辑&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> newCore = core.before(cb)<br>newCore(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)  <span class="hljs-comment">//core [ &#x27;1&#x27;, &#x27;2&#x27; ]</span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul><li>执行core之前，封装一个高阶函数，传进去一个回调函数</li><li>这样执行core的时候就可以执行回调，回调里面做自己想要的操作</li></ul><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>多个参数的传入转换成n个函数的形式接受、每个函数接受一个参数</p></blockquote><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>写一个判断函数类型的函数</li><li>原函数<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isType</span> (<span class="hljs-params">val, type</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(val) == <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(isType(<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;Number&#x27;</span>)) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(isType(<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;Number&#x27;</span>)) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure></li><li>柯里化改进<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isType</span> (<span class="hljs-params">type</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(val) == <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> isString = isType(<span class="hljs-string">&#x27;String&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(isString(<span class="hljs-string">&#x27;123&#x27;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(isString(<span class="hljs-number">123</span>)) <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><blockquote><p>可以看到，柯里化之后一个函数被改成多个函数分别接收参数，而之前用户调用isType，每次都要把类型当做参数输入，柯里化之后，用户只需要输入一次类型，就可以多次调用函数、输入要判断的值进行类型判断</p></blockquote></li></ul><h4 id="通用函数柯里化的实现"><a href="#通用函数柯里化的实现" class="headerlink" title="通用函数柯里化的实现"></a>通用函数柯里化的实现</h4><ul><li>实现一个函数，将普通函数转换成柯里化函数</li><li>思路：<ul><li>声明一个函数，其参数为普通函数</li><li>内部创建一个函数，参数初始化为空数组arg，其返回值为一个函数</li><li>如果arg的长度等于普通函数的长度则返回普通函数并执行。</li><li>如果没有达到，则返回一个新函数，参数为newArg,递归调用内部函数，将newArg和arg合并作为新的arg<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span> (<span class="hljs-params">a, b, c, d</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b + c + d<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curring</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> inner = <span class="hljs-function">(<span class="hljs-params">arg = []</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> arg.length &gt;= fn.length ? fn(...arg) : <span class="hljs-function">(<span class="hljs-params">...newArg</span>) =&gt;</span> inner([...arg, ...newArg])<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> inner()<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(curring(sum)(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">4</span>)) <span class="hljs-comment">//10</span><br></code></pre></div></td></tr></table></figure><h4 id="利用柯里化函数实现类型判断"><a href="#利用柯里化函数实现类型判断" class="headerlink" title="利用柯里化函数实现类型判断"></a>利用柯里化函数实现类型判断</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isType</span> (<span class="hljs-params">type, val</span>) </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(val) == <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span><br>&#125;<br><br><span class="hljs-keyword">let</span> util = &#123;&#125;;<br><br>[<span class="hljs-string">&#x27;String&#x27;</span>, <span class="hljs-string">&#x27;Number&#x27;</span>, <span class="hljs-string">&#x27;Null&#x27;</span>, <span class="hljs-string">&#x27;Boolean&#x27;</span>, <span class="hljs-string">&#x27;Undefined&#x27;</span>].forEach(<span class="hljs-function"><span class="hljs-params">type</span> =&gt;</span> &#123;<br>    util[<span class="hljs-string">&#x27;is&#x27;</span> + type] = curring(isType)(type)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(util.isString(<span class="hljs-string">&#x27;123&#x27;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(util.isNumber(<span class="hljs-number">123</span>))  <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2 id="发布订阅者模式"><a href="#发布订阅者模式" class="headerlink" title="发布订阅者模式"></a>发布订阅者模式</h2><h4 id="高阶函数的形式解决并发问题"><a href="#高阶函数的形式解决并发问题" class="headerlink" title="高阶函数的形式解决并发问题"></a>高阶函数的形式解决并发问题</h4><blockquote><p>node主线程中，异步回调是在主线程执行后执行的、因此想要收集异步函数执行的结果的集合，可以采用高阶函数的形式</p></blockquote></li></ul></li><li>高阶函数中设置一个数组存储异步数据，设置一个条件，当条件达成，执行传入的回调</li><li>高阶函数返回一个函数，通过函数的参数接受异步的数据<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">after</span> (<span class="hljs-params">_timer, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = []<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">data, index</span>) =&gt;</span> &#123;<br>        arr[index] = data<br>        <span class="hljs-keyword">if</span> (--_timer == <span class="hljs-number">0</span>) &#123;<br>            callback(arr)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> out = after(<span class="hljs-number">2</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data) <span class="hljs-comment">// [a,b]</span><br>&#125;)<br><br>fs.readFile(<span class="hljs-string">&quot;./a.txt&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    out(data, <span class="hljs-number">0</span>)<br>&#125;)<br>fs.readFile(<span class="hljs-string">&quot;./b.txt&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    out(data, <span class="hljs-number">1</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="发布订阅者模式解决"><a href="#发布订阅者模式解决" class="headerlink" title="发布订阅者模式解决"></a>发布订阅者模式解决</h4></li><li>声明一个类，包含一个数组存储订阅的函数，一个接受订阅的函数，一个发布函数，用来接受数据，并执行订阅函数<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>)<br><br><span class="hljs-keyword">const</span> events = &#123;<br>    <span class="hljs-attr">_arr</span>: [],<br>    <span class="hljs-attr">on</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>._arr.push(fn)<br>    &#125;,<br>    <span class="hljs-attr">emit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>._arr.forEach(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> &#123;<br>            fn(data)<br>        &#125;)<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-comment">//订阅</span><br>events.on(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    arr.push(data)<br>    <span class="hljs-keyword">if</span> (arr.length &gt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(arr)<br>    &#125;<br>&#125;)<br><br>fs.readFile(<span class="hljs-string">&quot;./a.txt&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//发布</span><br>    events.emit(data)<br>&#125;)<br>fs.readFile(<span class="hljs-string">&quot;./b.txt&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    events.emit(data)  <span class="hljs-comment">//[a,b]</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2></li><li>被观察者绑定观察者</li><li>当被观察者状态改变的时候，绑定的观察者会更新状态<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">subJect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>        <span class="hljs-built_in">this</span>.state = <span class="hljs-string">&#x27;笑&#x27;</span><br>        <span class="hljs-built_in">this</span>.observer = []<br>    &#125;<br>    <span class="hljs-comment">// 关联观察者</span><br>    attach (o) &#123;<br>        <span class="hljs-built_in">this</span>.observer.push(o)<br>    &#125;<br>    <span class="hljs-comment">//状态改变</span><br>    setState (newState) &#123;<br>        <span class="hljs-built_in">this</span>.state = newState<br>        <span class="hljs-comment">//通知观察者</span><br>        <span class="hljs-built_in">this</span>.observer.forEach(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> &#123;<br>            <span class="hljs-comment">//观察者更新状态</span><br>            o.updata(<span class="hljs-built_in">this</span>.name, <span class="hljs-built_in">this</span>.state)<br>        &#125;)<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> </span>&#123;<br>    updata (name, state) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>的状态变为:<span class="hljs-subst">$&#123;state&#125;</span>`</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//声明被观察者</span><br><span class="hljs-keyword">const</span> baby = <span class="hljs-keyword">new</span> subJect(<span class="hljs-string">&quot;baby&quot;</span>)<br><span class="hljs-comment">//声明观察者</span><br><span class="hljs-keyword">const</span> mother = <span class="hljs-keyword">new</span> Observer()<br><span class="hljs-comment">//绑定观察者</span><br>baby.attach(mother)<br><br>baby.setState(<span class="hljs-string">&#x27;哭&#x27;</span>) <span class="hljs-comment">//baby的状态变为:哭</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Promise A+规范的实现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>Promise</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
