<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>A+规范的实现</title>
    <link href="/2021/09/06/A-%E8%A7%84%E8%8C%83%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/09/06/A-%E8%A7%84%E8%8C%83%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="发布订阅模式和观察者模式"><a href="#发布订阅模式和观察者模式" class="headerlink" title="发布订阅模式和观察者模式"></a>发布订阅模式和观察者模式</h2><ul><li>node主线程中,异步回调是在主线程执行后执行，因此想要搜集异步函数执行的结果集合，可以采用高阶函数的形式</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">after</span>(<span class="hljs-params">timer, callback</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> _arr = []<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">data, index</span>) =&gt;</span> &#123;<br>    _arr[index] = data<br>    <span class="hljs-keyword">if</span> (--timer == <span class="hljs-number">0</span>) &#123;<br>      callback(_arr)<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> out = after(<span class="hljs-number">2</span>, <span class="hljs-function">(<span class="hljs-params">arr</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(arr)<br>&#125;)<br><br>fs.readFile(<span class="hljs-string">&#x27;./a.txt&#x27;</span>, <span class="hljs-string">&#x27;UTF8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  out(data, <span class="hljs-number">0</span>)<br>&#125;)<br><br>fs.readFile(<span class="hljs-string">&#x27;./b.txt&#x27;</span>, <span class="hljs-string">&#x27;UTF8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  out(data, <span class="hljs-number">1</span>)<br>&#125;)<br><br></code></pre></div></td></tr></table></figure><ul><li><p>发布订阅模式，也可以解决这个问题</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">const</span> events = &#123;<br><span class="hljs-attr">_events</span>: [],<br><span class="hljs-attr">on</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>._events.push(fn)<br>&#125;,<br><span class="hljs-attr">emit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>._events.forEach(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> fn(data))<br>&#125;,<br>&#125;<br><br><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-comment">//订阅</span><br>events.on(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>arr.push(data)<br><span class="hljs-keyword">if</span> (arr.length &gt;= <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(...arr)<br>&#125;<br>&#125;)<br><br>fs.readFile(<span class="hljs-string">&#x27;./a.txt&#x27;</span>, <span class="hljs-string">&#x27;UTF8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//发布</span><br>events.emit(data)<br>&#125;)<br><br>fs.readFile(<span class="hljs-string">&#x27;./b.txt&#x27;</span>, <span class="hljs-string">&#x27;UTF8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//发布</span><br>events.emit(data)<br>&#125;)<br><br></code></pre></div></td></tr></table></figure></li><li><p>观察者模式</p><ul><li><p>被观察者中的数组记录了观察者，状态改变时通过数组调用观察者的状态更新方法</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//被观察者</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>        <span class="hljs-comment">//被观察者状态</span><br>        <span class="hljs-built_in">this</span>.state = <span class="hljs-string">&#x27;笑&#x27;</span><br>        <span class="hljs-built_in">this</span>.observers = []<br>    &#125;<br>    <span class="hljs-comment">//关联观察者</span><br>    <span class="hljs-function"><span class="hljs-title">attach</span>(<span class="hljs-params">o</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.observers.push(o)<br>    &#125;<br>    <span class="hljs-comment">//状态改变</span><br>    <span class="hljs-function"><span class="hljs-title">setState</span>(<span class="hljs-params">newState</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = newState<br>        <span class="hljs-comment">//通知观察者状态改变了</span><br>        <span class="hljs-built_in">this</span>.observers.forEach(<span class="hljs-function">(<span class="hljs-params">o</span>) =&gt;</span> &#123;<br>        o.updata(<span class="hljs-built_in">this</span>.name, newState)<br>        &#125;)<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//观察者</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">updata</span>(<span class="hljs-params">name, newState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(name + newState + <span class="hljs-string">&#x27;了&#x27;</span>)<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//创建被观察者</span><br>    <span class="hljs-keyword">let</span> baby = <span class="hljs-keyword">new</span> Subject(<span class="hljs-string">&#x27;宝宝&#x27;</span>)<br>    <span class="hljs-comment">//创建观察者</span><br>    <span class="hljs-keyword">let</span> mother = <span class="hljs-keyword">new</span> Observer()<br>    <span class="hljs-keyword">let</span> father = <span class="hljs-keyword">new</span> Observer()<br><br>    <span class="hljs-comment">//关联观察者</span><br>    baby.attach(mother)<br>    baby.attach(father)<br>    <span class="hljs-comment">//改变状态</span><br>    baby.setState(<span class="hljs-string">&#x27;哭&#x27;</span>)<br>    baby.setState(<span class="hljs-string">&#x27;闹&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><ul><li><p>定义</p><ul><li><p>多个参数的传入，把它转换为n个函数的形式，可以暂存变脸，一般柯里化参数要求一个个的传</p></li><li><p>例子</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isType</span>(<span class="hljs-params">val, type</span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(val) == <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span>&#125;<br><span class="hljs-built_in">console</span>.log(isType(<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;Number&#x27;</span>))<br><span class="hljs-built_in">console</span>.log(isType(<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;String&#x27;</span>))<br></code></pre></div></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>js深入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>Promise</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
